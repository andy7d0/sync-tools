#!/bin/bash
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source ${__dir}/colors

dir=$(pwd)
while ! [ -f "$dir/syncsrc.rc" ]
do
	if [ -z "$dir" ] ; then echo ~~ config not found ~~ ; exit 1; fi
	dir=$(dirname "$dir")
done

wd=$(basename "$dir")
dir=$(dirname "$dir")

mkdir -p "$dir/.seats/$wd"
mkdir -p "$dir/.seats/.locks"

. "$dir/$wd/syncsrc.rc"
local_user=$(id -un)
local_group=$(id -gn)
echo -e "folder is ${Cyan}$dir${NC}"
echo -e "subfolder is ${Cyan}$wd${NC}"
echo -e "remote host is ${Cyan}$remote_host${NC}"
echo -e "remote folder is ${Cyan}$remote_path${NC}"
echo -e "local user is ${Cyan}$local_user:$local_group${NC}"
echo

ssh_user_group_map="${map_to_remote_user+--usermap=$local_user:$map_to_remote_user} ${map_to_remote_group+--groupmap=$local_group:$map_to_remote_group}"

SSH_CTL="$dir/.seats/.locks/ssh-$wd"

prepare_sync() {
	echo ssh -nN -M -S "$SSH_CTL" $1
	ssh -nN -M -S "$SSH_CTL" -o ServerAliveInterval=10 -o ServerAliveCountMax=1 "$1"
}

stop_sync() {
	echo ssh -O exit -S "$SSH_CTL" $1
	ssh -O exit -S "$SSH_CTL" $1
}

join_arr() { local IFS=$'\n'; echo "$*"; }


host=$(hostname)
if [ "$1" = "test" ]; then host="$host+test"; shift; fi
macine=$(cat /etc/machine-id | sha256sum | cut -c 1-64)
seat=$host-$macine

seats_dir="$dir/.seats/$wd"
seat_file="$seats_dir/$seat"

remote_seats_dir="$remote_path/.seats/$wd"


lockdir="$dir/.seats/.locks"
lock="$lockdir/dirwatch-$wd"

prev=$(cat "$lock")

exec 9>"$lock"
if ! flock -n 9
then
 test -n "$prev" && echo replace $prev 
 test -n "$prev" && kill $prev
fi

test "$1" = "stop" && exit

flock 9

function ssh_tunnel() {
	while true
	do
		echo connect....
		prepare_sync "$remote_host"
		echo .....connection dropped, reconnect
		sleep 1
	done
}

( ssh_tunnel ) &
ssh_tunnel_id=$!
echo ssh tunnel id is $ssh_tunnel_id

sync_stamp() {
	#if sync queue not empty
	# - rsync with recorded changes
	# - clear queue
	# - send stamp

	test -s "$1" && \
	echo -e "${Blue}push:${Green}" && \
	cat "$1" && \
	echo -e "${NC}" && \
	instant_sync -auv --delete-missing-args --files-from="$1" \
			${excluded_from_local_to_remote[@]/#/--exclude=} \
			"$dir/$wd/" "$remote_host:$remote_path/$wd/" \
	&& : > "$1" \
	&& instant_sync -auxW "$1" "$remote_host:$remote_seats_dir/${1#$seats_dir/}"
	
	#TODO:
	# later changes will be synced again
	# becase they found as diff between index and newindex
	# we can incrementally patch index with this changes:
	# - add new files
	# - remove deleted
	# - change stamps
	# maybe we should disable local push when monitoring is active
	# but we should push at least once at startup
}

# make newindex and changed from index
function fix_changes() {
	# make new index
	find "$dir/$wd" -type f -printf "%T@ %P\n" | sort > "$lockdir/newindex-$wd"
		
	# make diff
	# deleted recorded as first column
	#	stamp space file-name with spaces
	# create recorderd as second column
	# 	tab stamp space file-name with spaces
	# changed recordes twice
	# once as deleted and once as created
	comm -3 \
		"$lockdir/index-$wd" \
		"$lockdir/newindex-$wd" \
		>> "$lockdir/indexdiff-$wd"
}

function push_changed() {
	# instruct monitor to record all changes when happen while making new index
	# but do not send them instantly
	echo ""
	echo "---- full (index) local check ----"
	truncate -s 0 "$lockdir/indexdiff-$wd"
	touch "$lockdir/index-$wd"

	fix_changes

	# trim up to first space
	cut -d ' ' -f 2- "$lockdir/indexdiff-$wd" | sort | uniq >> "$seat_file"

	sync_stamp "$seat_file" && \
	mv "$lockdir/newindex-$wd" "$lockdir/index-$wd"
	
	#if nothing to sync sync_stam returns false so newindex not renamed
	# just remove 
	test -e "$lockdir/newindex-$wd" && rm "$lockdir/newindex-$wd"
	
	#unlock monitor sync
	rm "$lockdir/indexdiff-$wd"

	echo "---- full (index) local check done ----"
	echo ""
}

function pull_changed() {

	# download remote stamps
	echo ""
	echo "---- check remote ----"
	instant_sync -utWxd "$remote_host:$remote_seats_dir/" "$seats_dir/"
	# find latest stamp
	latest=$(ls -t "$seats_dir"/*-* | head -1)

	#if remote is newer sync back
	if test "$latest" != "$seat_file"
	then
	( flock 10 
		echo ""
		echo -e "${Red}----- pull -----${$NC}"
		instant_sync -auv --delete \
			${excluded_from_remote_to_local[@]/#/--exclude=} \
			"$remote_host:$remote_path/$wd/" "$dir/$wd/" \
		echo "----- pulled -----"
		echo ""
	)
	fi

	echo "---- remote check done ----"
	echo ""
}

function push_pull_sync() {
	while true
	do
		sleep $sync_timeout
	
		# during push our monitor record all changes but not transfer them
		push_changed
		# during pull do not record changes!
		pull_changed
		
	done
}

exec 10>"$lockdir/monitor-$wd"


echo -e "${Blue}wait for initial sync ${NC}"
push_changed
pull_changed
echo -e "${Blue} initial sync done, start remote motitor ${NC}"

( push_pull_sync ) &
push_pull_id=$!
echo push/pull id is $push_pull_id

echo -e "${Blue} start local motitor ${NC}"

inotifywait -q --timefmt '%Y-%m-%d%t%T' --format '%T %e %w%f' \
-e modify -e attrib -e move -e move_self -e create -e delete -e delete_self \
-m -r $dir/$wd > >(
while read file
do 
  if flock -n 10
  then
  	# we do NOT block on lock
  	# so if pull lock is in place
  	# monitor silently ignore changes
  	# of course, this means that we can drop right changes
  	# BUT if this happen there are two masters
  	# and this mode is unsupported and can not be
	files=("$file")
	while read -t 0.2 file2
	do
		files+=("$file2")
	done
	unset created
	unset existing
	declare -A created
	declare -A existing
	for i in "${files[@]}"
	do
		prs=( $i )
		echo $i
		dt=${prs[0]}
		tm=${prs[1]}
		op=${prs[2]}
		ff=${prs[@]:3}
		ff="${ff[*]}"
		case "$op" in
		"CREATE" )
			created[$ff]=$op
			;;
		"MOVED_FROM" | "DELETE" )
			if [[ -z "${created[$ff]}" ]]
			then
				#echo existing
				existing[$ff]=$op
			else
				#echo temp
				unset created[$ff]
			fi
			;;
		* )
			if [[ -z "${created[$ff]}" ]]
			then
				existing[$ff]=$op
			else
				created[$ff]=$op
			fi
			;;
		esac
		#echo $op $ff 
	done
	echo SYNC:

	# calculate changes, remove create/delete pairs
	outfiles=( ${!created[@]} ${!existing[@]} )
	outfiles=( ${outfiles[@]#$dir/$wd/} )

	# record change flag
	join_arr ${outfiles[@]} >> "$seat_file"

	# push changed files if no global sync in progress
	test ! -e "$lockdir/indexdiff-$wd" && \
		echo " --- push monitored changes --- " && \
		sync_stamp "$seat_file"
  fi
done
) &
echo $! > "$lock"
inotify=$!
echo we are $inotify


trap ctrl_c INT
function ctrl_c() {
	kill $inotify
}

wait $inotify

kill $push_pull_id $ssh_tunnel_id
stop_sync $remote_host

echo "DONE"

